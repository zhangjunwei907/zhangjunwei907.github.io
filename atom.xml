<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhanglinquan.github.io</id>
    <title>张林铨的blog</title>
    <updated>2020-02-19T12:33:32.444Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhanglinquan.github.io"/>
    <link rel="self" href="https://zhanglinquan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zhanglinquan.github.io/images/avatar.png</logo>
    <icon>https://zhanglinquan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 张林铨的blog</rights>
    <entry>
        <title type="html"><![CDATA[本小学生蒟蒻的第一篇题解]]></title>
        <id>https://zhanglinquan.github.io/post/ben-xiao-xue-sheng-ju-ruo-de-di-yi-pian-ti-jie</id>
        <link href="https://zhanglinquan.github.io/post/ben-xiao-xue-sheng-ju-ruo-de-di-yi-pian-ti-jie">
        </link>
        <updated>2020-01-28T12:27:30.000Z</updated>
        <content type="html"><![CDATA[<p>这道题非常简单，~~为什么呢？~~<s>因为老师讲的例题就是这个啊！</s></p>
<p>OK，废话不多说，本小学生蒟蒻认为，用桶排序，俗称小学生排序（哪个老师取的<s>坏</s>好名字？），直接完成排序，在不管格内是几，就输出一个即可。</p>
<p>why？见代码<br>
抄袭必CE</p>
<pre><code class="language-cpp">//注释中的代码是在a数组为bool情况下使用的
#include&lt;bits/stdc++.h&gt;//万能头，不用白不用
using namespace std;
int a[10000000];//之所以不用bool是因为代码要有通用性，直接用模板（bool a[10000000]
int main(){
    int n,s=0;//n是输入个数，s是输出个数
  	bool f=false;//是否为第一个输出（防止多空格
    int x;
    cin&gt;&gt;n;
    for(int i=1;i&lt;=n;i++){
        cin&gt;&gt;x;
        a[x]++;//a[x]=!a[x]
    }
    for(int i=1;i&lt;=1000;i++){//1000是指最大数为1000（数组中记的是数字i的存在情况，而存在的最大数为1000）
        if(a[i])//有这个数
            s++；
    }
    cout&lt;&lt;s&lt;&lt;endl;
    for(int i=1;i&lt;=1000;i++){
        if(a[i]){//有这个数
            if(f==0){//是第一个
                cout&lt;&lt;i;
                f=！f；
            }
            else
                cout&lt;&lt;&quot; &quot;&lt;&lt;i;
        }
    }
    cout&lt;&lt;endl;
    return 0;
}

</code></pre>
<p>e.g</p>
<p>来模拟一下程序是如何工作的</p>
<p>输入：8</p>
<p>1 1 1 2 3 3 6 5</p>
<table>
<thead>
<tr>
<th style="text-align:left">i</th>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
<th style="text-align:left">5</th>
<th style="text-align:left">6</th>
<th style="text-align:left">7</th>
<th style="text-align:left">8</th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">a[i]</td>
<td style="text-align:left">3</td>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>目前程序执行了第一个循环</p>
<p>开始第二个循环</p>
<p>i=1 a[i]=true s++ s=1</p>
<p>i=2 a[i]=true s++ s=2</p>
<p>i=3 a[i]=true s++ s=3</p>
<p>i=4 a[i]=false 啥也不干</p>
<p>i=5 a[i]=true s++ s=4</p>
<p>i=6 a[i]=true s++ s=5</p>
<p>i=7 a[i]=false 啥也不干</p>
<p>略（都是啥也不干）</p>
<p>开始第三个循环<br>
i=1 f=false a[i]=true 输出i f=true</p>
<p>i=2 f=true a[i]=true 输出i</p>
<p>i=3 f=true a[i]=true 输出i</p>
<p>i=4 f=true a[i]=false 啥也不干</p>
<p>i=5 f=true a[i]=true 输出i</p>
<p>i=6 f=true a[i]=true 输出i</p>
<p>i=7 a[i]=false 啥也不干</p>
<p>略（都是啥也不干）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[递归]]></title>
        <id>https://zhanglinquan.github.io/post/递归</id>
        <link href="https://zhanglinquan.github.io/post/递归">
        </link>
        <updated>2019-10-24T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>这节课学了递归，<s>好晕</s></p>
<p>好不容易想通了一点赶紧记下，充当第一篇博客</p>
<p>递归就是函数自己调用自己的过程。那为什么要有递归呢？原因很简单：在解决一个问题的同时，需要解决另一个与当前问题相同的问题，并且这个问题在特定情况下有解（递归结束条件），其他情况的答案都可由此答案推导而来（转移方程）。那又有问题了，为什么不用循环呢？观察上面的描述中“需要解决另一个与当前问题相同的问题”这一句话，真的只需要解决另一个吗？答案是否定的，有可能要解决多个同样的问题，这种情况下，如果使用循环，那么每个循环都要产生多个同样的循环，是无法实现的，所以才要使用递归。</p>
]]></content>
    </entry>
</feed>